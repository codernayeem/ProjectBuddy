// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  UNDERGRADUATE
  GRADUATE
  FREELANCER
  PROFESSIONAL
  STARTUP_FOUNDER
  ENTREPRENEUR
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  username     String    @unique
  firstName    String
  lastName     String
  bio          String?
  avatar       String?
  banner       String?
  country      String?
  city         String?
  address      String?
  website      String?
  linkedin     String?
  github       String?
  portfolio    String?
  company      String?
  position     String?
  userType     UserType  @default(UNDERGRADUATE)
  skills       String[]  @default([])
  interests    String[]  @default([])
  isActive     Boolean   @default(true)
  timezone     String?
  passwordHash String
  refreshToken String?
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  sentConnections     Connection[] @relation("ConnectionSender")
  receivedConnections Connection[] @relation("ConnectionReceiver")
  teamMemberships     TeamMember[]
  ownedTeams          Team[]       @relation("TeamOwner")
  sentTeamInvitations TeamInvitation[] @relation("TeamInviter")
  receivedTeamInvitations TeamInvitation[] @relation("TeamInvitee")
  teamJoinRequests    TeamJoinRequest[]
  posts               Post[]
  comments            Comment[]
  reactions           Reaction[]
  commentReactions    CommentReaction[]
  shares              Share[]
  bookmarks           Bookmark[]
  sentMessages        Message[]    @relation("MessageSender")
  receivedMessages    Message[]    @relation("MessageReceiver")
  messageReactions    MessageReaction[]
  conversations       ConversationParticipant[]
  notifications       Notification[]
  aiRecommendations   AIRecommendation[]
  mentions            Mention[]
  following           Follow[]     @relation("Follower")
  followers           Follow[]     @relation("Following")
  teamFollows         TeamFollow[]
  userAnalytics       UserAnalytics[]

  @@map("users")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Connection {
  id         String           @id @default(uuid())
  senderId   String
  receiverId String
  status     ConnectionStatus @default(PENDING)
  message    String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  sender   User @relation("ConnectionSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("connections")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

enum TeamVisibility {
  PUBLIC
  PRIVATE
}

enum TeamType {
  SKILL_BASED
  STARTUP
  FREELANCE
  OPEN_SOURCE
  HACKATHON
  STUDY_GROUP
  NETWORKING
  MENTORSHIP
  BUSINESS
  OTHER
}

model Team {
  id                String         @id @default(uuid())
  name              String
  description       String
  shortDescription  String?
  visibility        TeamVisibility @default(PUBLIC)
  type              TeamType       @default(OTHER)
  avatar            String?
  banner            String?
  skills            String[]       @default([])
  tags              String[]       @default([])
  country           String?
  city              String?
  isRecruiting      Boolean        @default(true)
  allowJoinRequests Boolean        @default(true)
  maxMembers        Int?
  website           String?
  social            Json?          // Store social media links
  ownerId           String
  memberCount       Int            @default(1)
  followerCount     Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  owner           User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         TeamMember[]
  customRoles     TeamCustomRole[]
  invitations     TeamInvitation[]
  joinRequests    TeamJoinRequest[]
  posts           Post[]
  projects        TeamProject[]
  milestones      TeamMilestone[]
  achievements    TeamAchievement[]
  chatRooms       ChatRoom[]
  followers       TeamFollow[]
  teamAnalytics   TeamAnalytics[]

  @@map("teams")
}

enum TeamMemberStatus {
  ADMIN
  MODERATOR
  MEMBER
}

model TeamMember {
  id           String           @id @default(uuid())
  teamId       String
  userId       String
  status       TeamMemberStatus @default(MEMBER)
  title        String?
  isActive     Boolean          @default(true)
  joinedAt     DateTime         @default(now())

  team        Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  customRoles TeamMemberCustomRole[]

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamCustomRole {
  id          String   @id @default(uuid())
  teamId      String
  name        String
  description String?
  color       String?  // For UI display
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team    Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  members TeamMemberCustomRole[]

  @@unique([teamId, name])
  @@map("team_custom_roles")
}

model TeamMemberCustomRole {
  id           String @id @default(uuid())
  teamMemberId String
  customRoleId String

  teamMember TeamMember     @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  customRole TeamCustomRole @relation(fields: [customRoleId], references: [id], onDelete: Cascade)

  @@unique([teamMemberId, customRoleId])
  @@map("team_member_custom_roles")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model TeamInvitation {
  id        String           @id @default(uuid())
  teamId    String
  inviterId String
  inviteeId String?
  email     String?
  message   String?
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  team    Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter User  @relation("TeamInviter", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee User? @relation("TeamInvitee", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@unique([teamId, inviteeId])
  @@unique([teamId, email])
  @@map("team_invitations")
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TeamJoinRequest {
  id        String            @id @default(uuid())
  teamId    String
  userId    String
  message   String?
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_join_requests")
}

model TeamFollow {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_follows")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectCategory {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  GAME_DEVELOPMENT
  AI_ML
  DATA_SCIENCE
  BLOCKCHAIN
  IOT
  CYBERSECURITY
  UI_UX_DESIGN
  MARKETING
  BUSINESS
  RESEARCH
  OPEN_SOURCE
  EDUCATIONAL
  OTHER
}

model TeamProject {
  id                String          @id @default(uuid())
  title             String
  description       String
  shortDescription  String?
  status            ProjectStatus   @default(PLANNING)
  category          ProjectCategory @default(OTHER)
  startDate         DateTime?
  endDate           DateTime?
  estimatedDuration String?
  requiredSkills    String[]        @default([])
  tags              String[]        @default([])
  repositoryUrl     String?
  liveUrl           String?
  documentationUrl  String?
  images            String[]        @default([])
  teamId            String
  createdBy         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  team       Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  milestones TeamMilestone[]

  @@map("team_projects")
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model TeamMilestone {
  id          String          @id @default(uuid())
  title       String
  description String?
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  teamId      String
  projectId   String?
  createdBy   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  team         Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project      TeamProject?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  achievements TeamAchievement[]

  @@map("team_milestones")
}

model TeamAchievement {
  id          String   @id @default(uuid())
  title       String
  description String
  teamId      String
  milestoneId String?
  isShared    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  milestone TeamMilestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)

  @@map("team_achievements")
}

enum PostType {
  GENERAL
  ANNOUNCEMENT
  ACHIEVEMENT
  MILESTONE_COMPLETED
  NEW_MEMBER
  RECRUITMENT
  PROJECT_SHOWCASE
  PROJECT_UPDATE
  SKILL_SHARE
  RESOURCE_SHARE
  QUESTION
  POLL
  EVENT
  CELEBRATION
}

model Post {
  id            String    @id @default(uuid())
  content       String
  type          PostType  @default(GENERAL)
  authorId      String?   // null for team posts
  teamId        String?   // null for user posts
  media         String[]  @default([])
  tags          String[]  @default([])
  mentions      String[]  @default([]) // Array of user IDs
  hashtags      String[]  @default([])
  isEdited      Boolean   @default(false)
  editedAt      DateTime?
  visibility    String    @default("public") // public, connections, team
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  sharesCount   Int       @default(0)
  viewsCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  author      User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  team        Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  comments    Comment[]
  reactions   Reaction[]
  shares      Share[]
  bookmarks   Bookmark[]
  userMentions Mention[]
  analytics   PostAnalytics[]

  @@map("posts")
}

model Comment {
  id           String   @id @default(uuid())
  content      String
  authorId     String
  postId       String
  parentId     String?
  isEdited     Boolean  @default(false)
  editedAt     DateTime?
  likesCount   Int      @default(0)
  repliesCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  author    User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post                @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment?            @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]           @relation("CommentReplies")
  reactions CommentReaction[]

  @@map("comments")
}

model CommentReaction {
  id        String      @id @default(uuid())
  type      ReactionType
  userId    String
  commentId String
  createdAt DateTime    @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_reactions")
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  SUPPORT
  INSIGHTFUL
  FUNNY
  AMAZING
}

model Reaction {
  id        String      @id @default(uuid())
  type      ReactionType
  userId    String
  postId    String
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("reactions")
}

model Share {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  comment   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("shares")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Mention {
  id          String   @id @default(uuid())
  mentionerId String
  mentionedId String
  postId      String
  commentId   String?
  content     String?  // The context where mention happened
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  mentioner User @relation(fields: [mentionerId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("mentions")
}

enum ConversationType {
  DIRECT_MESSAGE
  GROUP_CHAT
  TEAM_CHAT
}

model Conversation {
  id            String           @id @default(uuid())
  type          ConversationType @default(DIRECT_MESSAGE)
  title         String?
  description   String?
  avatar        String?
  isGroup       Boolean          @default(false)
  teamId        String?
  createdBy     String
  lastMessageAt DateTime?
  isArchived    Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String    @id @default(uuid())
  conversationId String
  userId         String
  role           String    @default("member") // admin, member
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?
  isActive       Boolean   @default(true)
  isMuted        Boolean   @default(false)

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
  VIDEO
  SYSTEM
  REACTION
}

model Message {
  id             String      @id @default(uuid())
  content        String
  type           MessageType @default(TEXT)
  senderId       String
  receiverId     String?
  conversationId String
  replyToId      String?
  attachments    String[]    @default([])
  metadata       Json?       // Store additional message data
  isEdited       Boolean     @default(false)
  editedAt       DateTime?
  isDeleted      Boolean     @default(false)
  deletedAt      DateTime?
  readBy         String[]    @default([]) // Array of user IDs who read the message
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  sender       User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User?               @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo      Message?            @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies      Message[]           @relation("MessageReplies")
  reactions    MessageReaction[]

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model ChatRoom {
  id          String   @id @default(uuid())
  name        String
  description String?
  teamId      String
  isPrivate   Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("chat_rooms")
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  TEAM_INVITATION
  TEAM_JOIN_REQUEST
  TEAM_JOIN_REQUEST_ACCEPTED
  TEAM_JOIN_REQUEST_DECLINED
  TEAM_MEMBER_JOINED
  TEAM_MEMBER_LEFT
  TEAM_ROLE_ASSIGNED
  TEAM_MILESTONE_COMPLETED
  TEAM_ACHIEVEMENT_SHARED
  POST_REACTION
  POST_COMMENT
  POST_MENTION
  POST_SHARED
  COMMENT_REPLY
  COMMENT_REACTION
  MENTION
  FOLLOW
  TEAM_FOLLOW
  TEAM_POST
  MILESTONE_DUE
  SYSTEM_ANNOUNCEMENT
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  userId    String
  isRead    Boolean          @default(false)
  actionUrl String?
  data      Json?
  priority  String           @default("normal") // low, normal, high, urgent
  category  String           @default("general") // social, team, system, achievement
  createdAt DateTime         @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum RecommendationType {
  USER
  TEAM
  POST
  SKILL
  HASHTAG
}

model AIRecommendation {
  id          String             @id @default(uuid())
  type        RecommendationType
  userId      String
  targetId    String
  score       Float
  reason      String
  metadata    Json?
  isActive    Boolean            @default(true)
  isClicked   Boolean            @default(false)
  isDismissed Boolean            @default(false)
  createdAt   DateTime           @default(now())
  expiresAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId, type])
  @@map("ai_recommendations")
}

// Analytics Models
model UserAnalytics {
  id               String   @id @default(uuid())
  userId           String
  date             DateTime @db.Date
  postViews        Int      @default(0)
  postLikes        Int      @default(0)
  postComments     Int      @default(0)
  postShares       Int      @default(0)
  connectionsGained Int     @default(0)
  followersGained  Int      @default(0)
  teamsJoined      Int      @default(0)
  teamsFollowed    Int      @default(0)
  messagesExchanged Int     @default(0)
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("user_analytics")
}

model PostAnalytics {
  id             String   @id @default(uuid())
  postId         String
  date           DateTime @db.Date
  views          Int      @default(0)
  likes          Int      @default(0)
  comments       Int      @default(0)
  shares         Int      @default(0)
  bookmarks      Int      @default(0)
  clicks         Int      @default(0)
  engagementRate Float    @default(0)
  createdAt      DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, date])
  @@map("post_analytics")
}

model TeamAnalytics {
  id                String   @id @default(uuid())
  teamId            String
  date              DateTime @db.Date
  views             Int      @default(0)
  membersJoined     Int      @default(0)
  followersGained   Int      @default(0)
  postsCreated      Int      @default(0)
  projectsCreated   Int      @default(0)
  milestonesCompleted Int    @default(0)
  achievementsShared Int     @default(0)
  messagesExchanged Int      @default(0)
  createdAt         DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, date])
  @@map("team_analytics")
}

model TrendingTopic {
  id         String   @id @default(uuid())
  hashtag    String
  postCount  Int      @default(1)
  engagement Int      @default(0)
  trendScore Float    @default(0)
  category   String?
  date       DateTime @db.Date
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([hashtag, date])
  @@map("trending_topics")
}